<resources>
    <string name="app_name">ViewCapture</string>
    <string name="scrollview_text">
      第一遍.\nLifecycle-aware components perform actions in response to a change in the lifecycle status of another component, such as activities and fragments. These components help you produce better-organized, and often lighter-weight code, that is easier to maintain.\n\n
  A common pattern is to implement the actions of the dependent components in the lifecycle methods of activities and fragments. However, this pattern leads to a poor organization of the code and to the proliferation of errors. By using lifecycle-aware components, you can move the code of dependent components out of the lifecycle methods and into the components themselves.\n\n
  The android.arch.lifecycle package provides classes and interfaces that let you build lifecycle-aware components—which are components that can automatically adjust their behavior based on the current lifecycle state of an activity or fragment.\n\n
  Most of the app components that are defined in the Android Framework have lifecycles attached to them. Lifecycles are managed by the operating system or the framework code running in your process. They are core to how Android works and your application must respect them. Not doing so may trigger memory leaks or even application crashes.\n\n

       第二遍.\nLifecycle-aware components perform actions in response to a change in the lifecycle status of another component, such as activities and fragments. These components help you produce better-organized, and often lighter-weight code, that is easier to maintain.\n\n
  A common pattern is to implement the actions of the dependent components in the lifecycle methods of activities and fragments. However, this pattern leads to a poor organization of the code and to the proliferation of errors. By using lifecycle-aware components, you can move the code of dependent components out of the lifecycle methods and into the components themselves.\n\n
  The android.arch.lifecycle package provides classes and interfaces that let you build lifecycle-aware components—which are components that can automatically adjust their behavior based on the current lifecycle state of an activity or fragment.\n\n
  Most of the app components that are defined in the Android Framework have lifecycles attached to them. Lifecycles are managed by the operating system or the framework code running in your process. They are core to how Android works and your application must respect them. Not doing so may trigger memory leaks or even application crashes.\n\n

        第三遍.\nLifecycle-aware components perform actions in response to a change in the lifecycle status of another component, such as activities and fragments. These components help you produce better-organized, and often lighter-weight code, that is easier to maintain.\n\n
  A common pattern is to implement the actions of the dependent components in the lifecycle methods of activities and fragments. However, this pattern leads to a poor organization of the code and to the proliferation of errors. By using lifecycle-aware components, you can move the code of dependent components out of the lifecycle methods and into the components themselves.\n\n
  The android.arch.lifecycle package provides classes and interfaces that let you build lifecycle-aware components—which are components that can automatically adjust their behavior based on the current lifecycle state of an activity or fragment.\n\n
  Most of the app components that are defined in the Android Framework have lifecycles attached to them. Lifecycles are managed by the operating system or the framework code running in your process. They are core to how Android works and your application must respect them. Not doing so may trigger memory leaks or even application crashes.\n\n

        第四遍.\nLifecycle-aware components perform actions in response to a change in the lifecycle status of another component, such as activities and fragments. These components help you produce better-organized, and often lighter-weight code, that is easier to maintain.\n\n
  A common pattern is to implement the actions of the dependent components in the lifecycle methods of activities and fragments. However, this pattern leads to a poor organization of the code and to the proliferation of errors. By using lifecycle-aware components, you can move the code of dependent components out of the lifecycle methods and into the components themselves.\n\n
  The android.arch.lifecycle package provides classes and interfaces that let you build lifecycle-aware components—which are components that can automatically adjust their behavior based on the current lifecycle state of an activity or fragment.\n\n
  Most of the app components that are defined in the Android Framework have lifecycles attached to them. Lifecycles are managed by the operating system or the framework code running in your process. They are core to how Android works and your application must respect them. Not doing so may trigger memory leaks or even application crashes.\n\n

        第五遍.\nLifecycle-aware components perform actions in response to a change in the lifecycle status of another component, such as activities and fragments. These components help you produce better-organized, and often lighter-weight code, that is easier to maintain.\n\n
  A common pattern is to implement the actions of the dependent components in the lifecycle methods of activities and fragments. However, this pattern leads to a poor organization of the code and to the proliferation of errors. By using lifecycle-aware components, you can move the code of dependent components out of the lifecycle methods and into the components themselves.\n\n
  The android.arch.lifecycle package provides classes and interfaces that let you build lifecycle-aware components—which are components that can automatically adjust their behavior based on the current lifecycle state of an activity or fragment.\n\n
  Most of the app components that are defined in the Android Framework have lifecycles attached to them. Lifecycles are managed by the operating system or the framework code running in your process. They are core to how Android works and your application must respect them. Not doing so may trigger memory leaks or even application crashes.
                 </string>

    <string-array name="listView_item">
        <item>第一遍</item>
        <item>.NET</item>
        <item>basic</item>
        <item>b</item>
        <item>css</item>
        <item>c</item>
        <item>c#</item>
        <item>c++</item>
        <item>fortran</item>
        <item>foxbase</item>
        <item>html</item>
        <item>java</item>
        <item>javaScript</item>
        <item>jsp</item>
        <item>latex</item>
        <item>lua</item>
        <item>pascal</item>
        <item>perl</item>
        <item>php</item>
        <item>prolog</item>
        <item>python</item>
        <item>ruby</item>
        <item>sgml</item>
        <item>shell</item>
        <item>sql</item>
        <item>tcl/tk</item>
        <item>vb script</item>

        <item>第二遍</item>
        <item>.NET</item>
        <item>basic</item>
        <item>b</item>
        <item>css</item>
        <item>c</item>
        <item>c#</item>
        <item>c++</item>
        <item>fortran</item>
        <item>foxbase</item>
        <item>html</item>
        <item>java</item>
        <item>javaScript</item>
        <item>jsp</item>
        <item>latex</item>
        <item>lua</item>
        <item>pascal</item>
        <item>perl</item>
        <item>php</item>
        <item>prolog</item>
        <item>python</item>
        <item>ruby</item>
        <item>sgml</item>
        <item>shell</item>
        <item>sql</item>
        <item>tcl/tk</item>
        <item>vb script</item>

        <item>第三遍</item>
        <item>.NET</item>
        <item>basic</item>
        <item>b</item>
        <item>css</item>
        <item>c</item>
        <item>c#</item>
        <item>c++</item>
        <item>fortran</item>
        <item>foxbase</item>
        <item>html</item>
        <item>java</item>
        <item>javaScript</item>
        <item>jsp</item>
        <item>latex</item>
        <item>lua</item>
        <item>pascal</item>
        <item>perl</item>
        <item>php</item>
        <item>prolog</item>
        <item>python</item>
        <item>ruby</item>
        <item>sgml</item>
        <item>shell</item>
        <item>sql</item>
        <item>tcl/tk</item>
        <item>vb script</item>

        <item>第四遍</item>
        <item>.NET</item>
        <item>basic</item>
        <item>b</item>
        <item>css</item>
        <item>c</item>
        <item>c#</item>
        <item>c++</item>
        <item>fortran</item>
        <item>foxbase</item>
        <item>html</item>
        <item>java</item>
        <item>javaScript</item>
        <item>jsp</item>
        <item>latex</item>
        <item>lua</item>
        <item>pascal</item>
        <item>perl</item>
        <item>php</item>
        <item>prolog</item>
        <item>python</item>
        <item>ruby</item>
        <item>sgml</item>
        <item>shell</item>
        <item>sql</item>
        <item>tcl/tk</item>
        <item>vb script</item>
<!--
        <item>第五遍</item>
        <item>.NET</item>
        <item>basic</item>
        <item>b</item>
        <item>css</item>
        <item>c</item>
        <item>c#</item>
        <item>c++</item>
        <item>fortran</item>
        <item>foxbase</item>
        <item>html</item>
        <item>java</item>
        <item>javaScript</item>
        <item>jsp</item>
        <item>latex</item>
        <item>lua</item>
        <item>pascal</item>
        <item>perl</item>
        <item>php</item>
        <item>prolog</item>
        <item>python</item>
        <item>ruby</item>
        <item>sgml</item>
        <item>shell</item>
        <item>sql</item>
        <item>tcl/tk</item>
        <item>vb script</item>

        <item>第六遍</item>
        <item>.NET</item>
        <item>basic</item>
        <item>b</item>
        <item>css</item>
        <item>c</item>
        <item>c#</item>
        <item>c++</item>
        <item>fortran</item>
        <item>foxbase</item>
        <item>html</item>
        <item>java</item>
        <item>javaScript</item>
        <item>jsp</item>
        <item>latex</item>
        <item>lua</item>
        <item>pascal</item>
        <item>perl</item>
        <item>php</item>
        <item>prolog</item>
        <item>python</item>
        <item>ruby</item>
        <item>sgml</item>
        <item>shell</item>
        <item>sql</item>
        <item>tcl/tk</item>
        <item>vb script</item>

        <item>第七遍</item>
        <item>.NET</item>
        <item>basic</item>
        <item>b</item>
        <item>css</item>
        <item>c</item>
        <item>c#</item>
        <item>c++</item>
        <item>fortran</item>
        <item>foxbase</item>
        <item>html</item>
        <item>java</item>
        <item>javaScript</item>
        <item>jsp</item>
        <item>latex</item>
        <item>lua</item>
        <item>pascal</item>
        <item>perl</item>
        <item>php</item>
        <item>prolog</item>
        <item>python</item>
        <item>ruby</item>
        <item>sgml</item>
        <item>shell</item>
        <item>sql</item>
        <item>tcl/tk</item>
        <item>vb script</item>-->
    </string-array>
</resources>
